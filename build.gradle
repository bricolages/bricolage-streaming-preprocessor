buildscript {
    ext {
        springBootVersion = '2.1.7.RELEASE'
    }
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
}

///// Build ///////////////////////////////////////////////////////////////////////

version = '1.17.2'
group 'org.bricolages.streaming'

sourceCompatibility = '11'
targetCompatibility = '11'

compileJava {
    options.deprecation = true
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

repositories {
    jcenter()
}

dependencies {
    implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.data:spring-data-jpa'
    implementation 'org.springframework.data:spring-data-commons'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv'
    implementation 'org.yaml:snakeyaml'
    implementation 'org.postgresql:postgresql'
    implementation 'org.slf4j:slf4j-api'
    implementation 'ch.qos.logback:logback-classic'
    implementation 'org.projectlombok:lombok'
    implementation 'org.apache.derby:derby'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-test-autoconfigure'
    testImplementation 'junit:junit'
    testImplementation 'org.apache.derby:derby'
    testImplementation 'org.projectlombok:lombok'

    annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    annotationProcessor 'org.projectlombok:lombok'

    testAnnotationProcessor platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    testAnnotationProcessor 'org.projectlombok:lombok'

    implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.618')
    implementation 'com.amazonaws:aws-java-sdk-core'
    implementation 'com.amazonaws:aws-java-sdk-s3'
    implementation 'com.amazonaws:aws-java-sdk-sqs'

    // no BOM
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation group: 'io.sentry', name: 'sentry-logback', version: '1.7.30'
}

///// Test ///////////////////////////////////////////////////////////////////////////////

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
    }
}

///// Executable Jar ////////////////////////////////////////////////////////////////////

task showVersion() {
    println version
}

bootJar {
    baseName = 'bricolage-streaming-preprocessor'
    classifier = 'boot'
    version = 'LATEST'
    mainClassName = 'org.bricolages.streaming.Application'
}

///// Docker ////////////////////////////////////////////////////////////////////////////

if (!project.hasProperty("DOCKER_REPOSITORY")) {
    ext.DOCKER_REPOSITORY = "bricolage"
}

task dockerBuild(dependsOn: build, type: Exec) {
    description 'Build the Docker image.'
    commandLine "docker", "build", "--tag=${DOCKER_REPOSITORY}/${project.name}:${project.version}", "."
}

task dockerPush(dependsOn: dockerBuild, type: Exec) {
    description 'Push the Docker image.'
    commandLine "docker", "push", "${DOCKER_REPOSITORY}/${project.name}:${project.version}"
}
